library(nnet)
zoo=read.csv(file = "zoo.csv")
zoo$legs=as.factor(zoo$legs)
for(i in 1:ncol(zoo)){
zoo[,i]=as.factor(zoo[,i])
}
sampl=sample(1:100,0.25*100)
zootrain=zoo[-sampl,]
zootest=zoo[sampl,]
DT50Zoo= C50::C5.0(x=zootrain[,2:17],y=zootrain[,18])
estType=predict(DT50Zoo,zootest,type="class")
table(estType,zootest$type)
View(zoo)
help("nnet")
zootrain=zootrain[,-1]
zootest=zootest[,-1]
help("predict")
NnetZoo=nnet(type~.,zootrain,size=2)
estTYpe=predict(NnetZoo,zootest,type="class")
table(estType,zootest$type)
NnetZoo=nnet(type~.,zootrain,size=5)
estTYpe=predict(NnetZoo,zootest,type="class")
table(estType,zootest$type)
NnetZoo=nnet(type~.,zootrain,size=10)
estTYpe=predict(NnetZoo,zootest,type="class")
table(estType,zootest$type)
NnetZoo
summary(NnetZoo)
library(RSNNS)
library(RSNNS)
table(estType,zootest$type)
table(zoo$legs)
which(zoo$milk==0)
zoo[,which(zoo$milk==0)]
zoo[which(zoo$milk==0),]
str(zoo[which(zoo$milk==0),])
zoo[which(zoo$milk==1),]
zoo[which(zoo$milk==1 & zoo$feathers==1),]
zoo[which(zoo$milk==1 && zoo$feathers==1),]
zoo[which(zoo$milk==0 && zoo$feathers==1),]
zoo[which(zoo$milk==0 & zoo$feathers==1),]
# Load the data-set "zoo"
zoo=read.csv(file = "zoo.csv")
# Transform all atrribute to factors one to run the Decision tree algorithm
for(i in 1:ncol(zoo)){
zoo[,i]=as.factor(zoo[,i])
}
# Split Into train and test sets
sampl=sample(1:101,0.25*100)
zootrain=zoo[-sampl,]
zootest=zoo[sampl,]
# Train the model
DT50Zoo= C50::C5.0(x=zootrain[,2:17],y=zootrain[,18])
# Predict and show results
estType=predict(DT50Zoo,zootest,type="class")
table(estType,zootest$type)
plot(DT50Zoo)
(8+4+0+4+2+4)/25
1-((8+4+0+4+2+4)/25)
# Load the data-set "zoo"
zoo=read.csv(file = "zoo.csv")
# Transform all atrribute to factors one to run the Decision tree algorithm
for(i in 1:ncol(zoo)){
zoo[,i]=as.factor(zoo[,i])
}
# Split Into train and test sets
sampl=sample(1:101,0.25*100)
zootrain=zoo[-sampl,]
zootest=zoo[sampl,]
# Train the model
DT50Zoo= C50::C5.0(x=zootrain[,2:17],y=zootrain[,18])
# Predict and show results
estType=predict(DT50Zoo,zootest,type="class")
table(estType,zootest$type)
# Calcul taux d'erreur
1-((8+4+0+4+2+4)/25)
attach(zoo)
table(estType,type)
attach(zootest)
table(estType,type)
DT50Zoo
summary(DT50Zoo)
1-((8+4+0+4+2+4)/25)
# Load the data-set "zoo"
zoo=read.csv(file = "zoo.csv")
# Transform all atrribute to factors one to run the Decision tree algorithm
for(i in 1:ncol(zoo)){
zoo[,i]=as.factor(zoo[,i])
}
# Split Into train and test sets
sampl=sample(1:101,0.25*100)
zootrain=zoo[-sampl,]
zootest=zoo[sampl,]
# Train the model
DT50Zoo= C50::C5.0(x=zootrain[,2:17],y=zootrain[,18])
# Predict and show results
estType=predict(DT50Zoo,zootest,type="class")
table(estType,zootest$type)
# Calcul taux d'erreur
1-((8+4+0+4+2+4)/25)
summary(DT50Zoo)
1-((8+6+0+4+1+0+4)/25)
